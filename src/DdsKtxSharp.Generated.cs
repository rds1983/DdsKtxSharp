// Generated by Sichem at 2/14/2021 3:52:47 PM

using System;
using System.Runtime.InteropServices;

namespace DdsKtxSharp
{
	unsafe partial class DdsKtx
	{
		public const int DDSKTX_FORMAT_BC1 = 0;
		public const int DDSKTX_FORMAT_BC2 = 1;
		public const int DDSKTX_FORMAT_BC3 = 2;
		public const int DDSKTX_FORMAT_BC4 = 3;
		public const int DDSKTX_FORMAT_BC5 = 4;
		public const int DDSKTX_FORMAT_BC6H = 5;
		public const int DDSKTX_FORMAT_BC7 = 6;
		public const int DDSKTX_FORMAT_ETC1 = 7;
		public const int DDSKTX_FORMAT_ETC2 = 8;
		public const int DDSKTX_FORMAT_ETC2A = 9;
		public const int DDSKTX_FORMAT_ETC2A1 = 10;
		public const int DDSKTX_FORMAT_PTC12 = 11;
		public const int DDSKTX_FORMAT_PTC14 = 12;
		public const int DDSKTX_FORMAT_PTC12A = 13;
		public const int DDSKTX_FORMAT_PTC14A = 14;
		public const int DDSKTX_FORMAT_PTC22 = 15;
		public const int DDSKTX_FORMAT_PTC24 = 16;
		public const int DDSKTX_FORMAT_ATC = 17;
		public const int DDSKTX_FORMAT_ATCE = 18;
		public const int DDSKTX_FORMAT_ATCI = 19;
		public const int DDSKTX_FORMAT_ASTC4x4 = 20;
		public const int DDSKTX_FORMAT_ASTC5x5 = 21;
		public const int DDSKTX_FORMAT_ASTC6x6 = 22;
		public const int DDSKTX_FORMAT_ASTC8x5 = 23;
		public const int DDSKTX_FORMAT_ASTC8x6 = 24;
		public const int DDSKTX_FORMAT_ASTC10x5 = 25;
		public const int _DDSKTX_FORMAT_COMPRESSED = 26;
		public const int DDSKTX_FORMAT_A8 = 27;
		public const int DDSKTX_FORMAT_R8 = 28;
		public const int DDSKTX_FORMAT_RGBA8 = 29;
		public const int DDSKTX_FORMAT_RGBA8S = 30;
		public const int DDSKTX_FORMAT_RG16 = 31;
		public const int DDSKTX_FORMAT_RGB8 = 32;
		public const int DDSKTX_FORMAT_R16 = 33;
		public const int DDSKTX_FORMAT_R32F = 34;
		public const int DDSKTX_FORMAT_R16F = 35;
		public const int DDSKTX_FORMAT_RG16F = 36;
		public const int DDSKTX_FORMAT_RG16S = 37;
		public const int DDSKTX_FORMAT_RGBA16F = 38;
		public const int DDSKTX_FORMAT_RGBA16 = 39;
		public const int DDSKTX_FORMAT_BGRA8 = 40;
		public const int DDSKTX_FORMAT_RGB10A2 = 41;
		public const int DDSKTX_FORMAT_RG11B10F = 42;
		public const int DDSKTX_FORMAT_RG8 = 43;
		public const int DDSKTX_FORMAT_RG8S = 44;
		public const int _DDSKTX_FORMAT_COUNT = 45;
		public const int DDSKTX_TEXTURE_FLAG_CUBEMAP = 0x01;
		public const int DDSKTX_TEXTURE_FLAG_SRGB = 0x02;
		public const int DDSKTX_TEXTURE_FLAG_ALPHA = 0x04;
		public const int DDSKTX_TEXTURE_FLAG_DDS = 0x08;
		public const int DDSKTX_TEXTURE_FLAG_KTX = 0x10;
		public const int DDSKTX_CUBE_FACE_X_POSITIVE = 0;
		public const int DDSKTX_CUBE_FACE_X_NEGATIVE = 1;
		public const int DDSKTX_CUBE_FACE_Y_POSITIVE = 2;
		public const int DDSKTX_CUBE_FACE_Y_NEGATIVE = 3;
		public const int DDSKTX_CUBE_FACE_Z_POSITIVE = 4;
		public const int DDSKTX_CUBE_FACE_Z_NEGATIVE = 5;
		public const int DDSKTX_CUBE_FACE_COUNT = 6;
		public const int DDSKTX__ENCODE_UNORM = 0;
		public const int DDSKTX__ENCODE_SNORM = 1;
		public const int DDSKTX__ENCODE_FLOAT = 2;
		public const int DDSKTX__ENCODE_INT = 3;
		public const int DDSKTX__ENCODE_UINT = 4;
		public const int DDSKTX__ENCODE_COUNT = 5;
		public static readonly ddsktx__dds_translate_fourcc_format[] k__translate_dds_fourcc  = {new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('D') | ((uint)('X') << 8) | ((uint)('T') << 16) | ((uint)('1') << 24)), format =  DDSKTX_FORMAT_BC1, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('D') | ((uint)('X') << 8) | ((uint)('T') << 16) | ((uint)('2') << 24)), format =  DDSKTX_FORMAT_BC2, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('D') | ((uint)('X') << 8) | ((uint)('T') << 16) | ((uint)('3') << 24)), format =  DDSKTX_FORMAT_BC2, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('D') | ((uint)('X') << 8) | ((uint)('T') << 16) | ((uint)('4') << 24)), format =  DDSKTX_FORMAT_BC3, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('D') | ((uint)('X') << 8) | ((uint)('T') << 16) | ((uint)('5') << 24)), format =  DDSKTX_FORMAT_BC3, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('T') << 8) | ((uint)('I') << 16) | ((uint)('1') << 24)), format =  DDSKTX_FORMAT_BC4, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('B') | ((uint)('C') << 8) | ((uint)('4') << 16) | ((uint)('U') << 24)), format =  DDSKTX_FORMAT_BC4, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('T') << 8) | ((uint)('I') << 16) | ((uint)('2') << 24)), format =  DDSKTX_FORMAT_BC5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('B') | ((uint)('C') << 8) | ((uint)('5') << 16) | ((uint)('U') << 24)), format =  DDSKTX_FORMAT_BC5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('E') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('1') << 24)), format =  DDSKTX_FORMAT_ETC1, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('E') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('2') << 24)), format =  DDSKTX_FORMAT_ETC2, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('E') | ((uint)('T') << 8) | ((uint)('2') << 16) | ((uint)('A') << 24)), format =  DDSKTX_FORMAT_ETC2A, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('P') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('2') << 24)), format =  DDSKTX_FORMAT_PTC12A, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('P') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('4') << 24)), format =  DDSKTX_FORMAT_PTC14A, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)(' ') << 24)), format =  DDSKTX_FORMAT_ATC, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('E') << 24)), format =  DDSKTX_FORMAT_ATCE, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('T') << 8) | ((uint)('C') << 16) | ((uint)('I') << 24)), format =  DDSKTX_FORMAT_ATCI, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)('4') << 16) | ((uint)('4') << 24)), format =  DDSKTX_FORMAT_ASTC4x4, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)('5') << 16) | ((uint)('5') << 24)), format =  DDSKTX_FORMAT_ASTC5x5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)('6') << 16) | ((uint)('6') << 24)), format =  DDSKTX_FORMAT_ASTC6x6, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)('8') << 16) | ((uint)('5') << 24)), format =  DDSKTX_FORMAT_ASTC8x5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)('8') << 16) | ((uint)('6') << 24)), format =  DDSKTX_FORMAT_ASTC8x6, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = ((uint)('A') | ((uint)('S') << 8) | ((uint)(':') << 16) | ((uint)('5') << 24)), format =  DDSKTX_FORMAT_ASTC10x5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 36, format =  DDSKTX_FORMAT_RGBA16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 113, format =  DDSKTX_FORMAT_RGBA16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 0x00000040 | 0x00000001, format =  DDSKTX_FORMAT_BGRA8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 0x00000020, format =  DDSKTX_FORMAT_R8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 0x00020000, format =  DDSKTX_FORMAT_R8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 0x00000002, format =  DDSKTX_FORMAT_R8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 111, format =  DDSKTX_FORMAT_R16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 114, format =  DDSKTX_FORMAT_R32F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 51, format =  DDSKTX_FORMAT_RG8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 34, format =  DDSKTX_FORMAT_RG16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 112, format =  DDSKTX_FORMAT_RG16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 20, format =  DDSKTX_FORMAT_RGB8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 21, format =  DDSKTX_FORMAT_BGRA8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 36, format =  DDSKTX_FORMAT_RGBA16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 113, format =  DDSKTX_FORMAT_RGBA16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 31, format =  DDSKTX_FORMAT_RGB10A2, srgb =  0}};
		public static readonly ddsktx__dds_translate_fourcc_format[] k__translate_dxgi  = {new ddsktx__dds_translate_fourcc_format { dds_format = 71, format =  DDSKTX_FORMAT_BC1, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 72, format =  DDSKTX_FORMAT_BC1, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 74, format =  DDSKTX_FORMAT_BC2, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 75, format =  DDSKTX_FORMAT_BC2, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 77, format =  DDSKTX_FORMAT_BC3, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 78, format =  DDSKTX_FORMAT_BC3, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 80, format =  DDSKTX_FORMAT_BC4, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 83, format =  DDSKTX_FORMAT_BC5, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 96, format =  DDSKTX_FORMAT_BC6H, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 98, format =  DDSKTX_FORMAT_BC7, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 99, format =  DDSKTX_FORMAT_BC7, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 61, format =  DDSKTX_FORMAT_R8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 56, format =  DDSKTX_FORMAT_R16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 54, format =  DDSKTX_FORMAT_R16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 41, format =  DDSKTX_FORMAT_R32F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 49, format =  DDSKTX_FORMAT_RG8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 35, format =  DDSKTX_FORMAT_RG16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 34, format =  DDSKTX_FORMAT_RG16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 87, format =  DDSKTX_FORMAT_BGRA8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 91, format =  DDSKTX_FORMAT_BGRA8, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 28, format =  DDSKTX_FORMAT_RGBA8, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 29, format =  DDSKTX_FORMAT_RGBA8, srgb =  1}, new ddsktx__dds_translate_fourcc_format { dds_format = 11, format =  DDSKTX_FORMAT_RGBA16, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 10, format =  DDSKTX_FORMAT_RGBA16F, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 24, format =  DDSKTX_FORMAT_RGB10A2, srgb =  0}, new ddsktx__dds_translate_fourcc_format { dds_format = 26, format =  DDSKTX_FORMAT_RG11B10F, srgb =  0}};
		public static readonly ddsktx__dds_translate_pixel_format[] k__translate_dds_pixel  = {new ddsktx__dds_translate_pixel_format { bit_count = 8, flags =  0x00020000, bit_mask = new uint[] { 0x000000ff, 0x00000000, 0x00000000, 0x00000000 }, format =  DDSKTX_FORMAT_R8}, new ddsktx__dds_translate_pixel_format { bit_count = 16, flags =  0x00080000, bit_mask = new uint[] { 0x000000ff, 0x0000ff00, 0x00000000, 0x00000000 }, format =  DDSKTX_FORMAT_RG8S}, new ddsktx__dds_translate_pixel_format { bit_count = 24, flags =  0x00000040, bit_mask = new uint[] { 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000 }, format =  DDSKTX_FORMAT_RGB8}, new ddsktx__dds_translate_pixel_format { bit_count = 24, flags =  0x00000040, bit_mask = new uint[] { 0x000000ff, 0x0000ff00, 0x00ff0000, 0x00000000 }, format =  DDSKTX_FORMAT_RGB8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040, bit_mask = new uint[] { 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000 }, format =  DDSKTX_FORMAT_BGRA8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040 | 0x00000001, bit_mask = new uint[] { 0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000 }, format =  DDSKTX_FORMAT_RGBA8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00080000, bit_mask = new uint[] { 0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000 }, format =  DDSKTX_FORMAT_RGBA8S}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040, bit_mask = new uint[] { 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000 }, format =  DDSKTX_FORMAT_BGRA8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040 | 0x00000001, bit_mask = new uint[] { 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000 }, format =  DDSKTX_FORMAT_BGRA8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040 | 0x00000001, bit_mask = new uint[] { 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000 }, format =  DDSKTX_FORMAT_BGRA8}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040 | 0x00000001, bit_mask = new uint[] { 0x000003ff, 0x000ffc00, 0x3ff00000, 0xc0000000 }, format =  DDSKTX_FORMAT_RGB10A2}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00000040, bit_mask = new uint[] { 0x0000ffff, 0xffff0000, 0x00000000, 0x00000000 }, format =  DDSKTX_FORMAT_RG16}, new ddsktx__dds_translate_pixel_format { bit_count = 32, flags =  0x00080000, bit_mask = new uint[] { 0x0000ffff, 0xffff0000, 0x00000000, 0x00000000 }, format =  DDSKTX_FORMAT_RG16S}};
		public static readonly ddsktx__block_info[] k__block_info  = {new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_FLOAT)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 2, block_width =  8, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 2, block_width =  8, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 2, block_width =  8, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  2, min_block_y =  2, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  4, block_height =  4, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  4, block_height =  4, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 6, block_width =  5, block_height =  5, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  6, block_height =  6, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 4, block_width =  8, block_height =  5, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 3, block_width =  8, block_height =  6, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 3, block_width =  10, block_height =  5, block_size =  16, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 0, block_width =  0, block_height =  0, block_size =  0, min_block_x =  0, min_block_y =  0, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_COUNT)}, new ddsktx__block_info { bpp = 8, block_width =  1, block_height =  1, block_size =  1, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  0, g_bits =  0, b_bits =  0, a_bits =  8, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 8, block_width =  1, block_height =  1, block_size =  1, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  8, a_bits =  8, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  8, a_bits =  8, encoding =  (byte)(DDSKTX__ENCODE_SNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  16, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 24, block_width =  1, block_height =  1, block_size =  3, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  8, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 16, block_width =  1, block_height =  1, block_size =  2, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  32, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_FLOAT)}, new ddsktx__block_info { bpp = 16, block_width =  1, block_height =  1, block_size =  2, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  0, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_FLOAT)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  16, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_FLOAT)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  16, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_SNORM)}, new ddsktx__block_info { bpp = 64, block_width =  1, block_height =  1, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  16, b_bits =  16, a_bits =  16, encoding =  (byte)(DDSKTX__ENCODE_FLOAT)}, new ddsktx__block_info { bpp = 64, block_width =  1, block_height =  1, block_size =  8, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  16, g_bits =  16, b_bits =  16, a_bits =  16, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  8, a_bits =  8, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  10, g_bits =  10, b_bits =  10, a_bits =  2, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 32, block_width =  1, block_height =  1, block_size =  4, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  11, g_bits =  11, b_bits =  10, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 16, block_width =  1, block_height =  1, block_size =  2, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_UNORM)}, new ddsktx__block_info { bpp = 16, block_width =  1, block_height =  1, block_size =  2, min_block_x =  1, min_block_y =  1, depth_bits =  0, stencil_bits =  0, r_bits =  8, g_bits =  8, b_bits =  0, a_bits =  0, encoding =  (byte)(DDSKTX__ENCODE_SNORM)}};
		public static readonly ddsktx__ktx_format_info[] k__translate_ktx_fmt  = {new ddsktx__ktx_format_info { internal_fmt = 0x83F1, internal_fmt_srgb =  0x8C4D, fmt =  0x83F1, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x83F2, internal_fmt_srgb =  0x8C4E, fmt =  0x83F2, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x83F3, internal_fmt_srgb =  0x8C4F, fmt =  0x83F3, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C70, internal_fmt_srgb =  0, fmt =  0x8C70, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C72, internal_fmt_srgb =  0, fmt =  0x8C72, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8E8E, internal_fmt_srgb =  0, fmt =  0x8E8E, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8E8C, internal_fmt_srgb =  0, fmt =  0x8E8C, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8D64, internal_fmt_srgb =  0, fmt =  0x8D64, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x9274, internal_fmt_srgb =  0, fmt =  0x9274, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x9278, internal_fmt_srgb =  0x9275, fmt =  0x9278, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x9276, internal_fmt_srgb =  0x9277, fmt =  0x9276, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C01, internal_fmt_srgb =  0x8A54, fmt =  0x8C01, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C00, internal_fmt_srgb =  0x8A55, fmt =  0x8C00, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C03, internal_fmt_srgb =  0x8A56, fmt =  0x8C03, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C02, internal_fmt_srgb =  0x8A57, fmt =  0x8C02, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x9137, internal_fmt_srgb =  0, fmt =  0x9137, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x9138, internal_fmt_srgb =  0, fmt =  0x9138, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C92, internal_fmt_srgb =  0, fmt =  0x8C92, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x8C93, internal_fmt_srgb =  0, fmt =  0x8C93, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x87EE, internal_fmt_srgb =  0, fmt =  0x87EE, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B0, internal_fmt_srgb =  0x93D0, fmt =  0x93B0, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B2, internal_fmt_srgb =  0x93D2, fmt =  0x93B2, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B4, internal_fmt_srgb =  0x93D4, fmt =  0x93B4, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B5, internal_fmt_srgb =  0x93D5, fmt =  0x93B5, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B6, internal_fmt_srgb =  0x93D6, fmt =  0x93B6, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x93B8, internal_fmt_srgb =  0x93D8, fmt =  0x93B8, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0, internal_fmt_srgb =  0, fmt =  0, type =  0}, new ddsktx__ktx_format_info { internal_fmt = 0x1906, internal_fmt_srgb =  0, fmt =  0x1906, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x8229, internal_fmt_srgb =  0, fmt =  0x1903, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x8058, internal_fmt_srgb =  0x8C43, fmt =  0x1908, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x8F97, internal_fmt_srgb =  0, fmt =  0x1908, type =  0x1400}, new ddsktx__ktx_format_info { internal_fmt = 0x822C, internal_fmt_srgb =  0, fmt =  0x8227, type =  0x1403}, new ddsktx__ktx_format_info { internal_fmt = 0x8051, internal_fmt_srgb =  0x8C41, fmt =  0x1907, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x822A, internal_fmt_srgb =  0, fmt =  0x1903, type =  0x1403}, new ddsktx__ktx_format_info { internal_fmt = 0x822E, internal_fmt_srgb =  0, fmt =  0x1903, type =  0x1406}, new ddsktx__ktx_format_info { internal_fmt = 0x822D, internal_fmt_srgb =  0, fmt =  0x1903, type =  0x140B}, new ddsktx__ktx_format_info { internal_fmt = 0x822F, internal_fmt_srgb =  0, fmt =  0x8227, type =  0x1406}, new ddsktx__ktx_format_info { internal_fmt = 0x8F99, internal_fmt_srgb =  0, fmt =  0x8227, type =  0x1402}, new ddsktx__ktx_format_info { internal_fmt = 0x881A, internal_fmt_srgb =  0, fmt =  0x1908, type =  0x140B}, new ddsktx__ktx_format_info { internal_fmt = 0x805B, internal_fmt_srgb =  0, fmt =  0x1908, type =  0x1403}, new ddsktx__ktx_format_info { internal_fmt = 0x80E1, internal_fmt_srgb =  0x8C43, fmt =  0x80E1, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x8059, internal_fmt_srgb =  0, fmt =  0x1908, type =  0x8368}, new ddsktx__ktx_format_info { internal_fmt = 0x8C3A, internal_fmt_srgb =  0, fmt =  0x1907, type =  0x8C3B}, new ddsktx__ktx_format_info { internal_fmt = 0x822B, internal_fmt_srgb =  0, fmt =  0x8227, type =  0x1401}, new ddsktx__ktx_format_info { internal_fmt = 0x8F95, internal_fmt_srgb =  0, fmt =  0x8227, type =  0x1400}};
		public static readonly ddsktx__ktx_format_info2[] k__translate_ktx_fmt2  = {new ddsktx__ktx_format_info2 { internal_fmt = 0x803C, format =  DDSKTX_FORMAT_A8}, new ddsktx__ktx_format_info2 { internal_fmt = 0x1903, format =  DDSKTX_FORMAT_R8}, new ddsktx__ktx_format_info2 { internal_fmt = 0x1907, format =  DDSKTX_FORMAT_RGB8}, new ddsktx__ktx_format_info2 { internal_fmt = 0x1908, format =  DDSKTX_FORMAT_RGBA8}, new ddsktx__ktx_format_info2 { internal_fmt = 0x83F0, format =  DDSKTX_FORMAT_BC1}};
		public static readonly ddsktx__format_info[] k__formats_info  = {new ddsktx__format_info { name = "BC1", has_alpha =  0}, new ddsktx__format_info { name = "BC2", has_alpha =  1}, new ddsktx__format_info { name = "BC3", has_alpha =  1}, new ddsktx__format_info { name = "BC4", has_alpha =  0}, new ddsktx__format_info { name = "BC5", has_alpha =  0}, new ddsktx__format_info { name = "BC6H", has_alpha =  0}, new ddsktx__format_info { name = "BC7", has_alpha =  1}, new ddsktx__format_info { name = "ETC1", has_alpha =  0}, new ddsktx__format_info { name = "ETC2", has_alpha =  0}, new ddsktx__format_info { name = "ETC2A", has_alpha =  1}, new ddsktx__format_info { name = "ETC2A1", has_alpha =  1}, new ddsktx__format_info { name = "PTC12", has_alpha =  0}, new ddsktx__format_info { name = "PTC14", has_alpha =  0}, new ddsktx__format_info { name = "PTC12A", has_alpha =  1}, new ddsktx__format_info { name = "PTC14A", has_alpha =  1}, new ddsktx__format_info { name = "PTC22", has_alpha =  1}, new ddsktx__format_info { name = "PTC24", has_alpha =  1}, new ddsktx__format_info { name = "ATC", has_alpha =  0}, new ddsktx__format_info { name = "ATCE", has_alpha =  0}, new ddsktx__format_info { name = "ATCI", has_alpha =  0}, new ddsktx__format_info { name = "ASTC4x4", has_alpha =  1}, new ddsktx__format_info { name = "ASTC5x5", has_alpha =  1}, new ddsktx__format_info { name = "ASTC6x6", has_alpha =  0}, new ddsktx__format_info { name = "ASTC8x5", has_alpha =  1}, new ddsktx__format_info { name = "ASTC8x6", has_alpha =  0}, new ddsktx__format_info { name = "ASTC10x5", has_alpha =  0}, new ddsktx__format_info { name = "<unknown>", has_alpha =  0}, new ddsktx__format_info { name = "A8", has_alpha =  1}, new ddsktx__format_info { name = "R8", has_alpha =  0}, new ddsktx__format_info { name = "RGBA8", has_alpha =  1}, new ddsktx__format_info { name = "RGBA8S", has_alpha =  1}, new ddsktx__format_info { name = "RG16", has_alpha =  0}, new ddsktx__format_info { name = "RGB8", has_alpha =  0}, new ddsktx__format_info { name = "R16", has_alpha =  0}, new ddsktx__format_info { name = "R32F", has_alpha =  0}, new ddsktx__format_info { name = "R16F", has_alpha =  0}, new ddsktx__format_info { name = "RG16F", has_alpha =  0}, new ddsktx__format_info { name = "RG16S", has_alpha =  0}, new ddsktx__format_info { name = "RGBA16F", has_alpha =  1}, new ddsktx__format_info { name = "RGBA16", has_alpha =  1}, new ddsktx__format_info { name = "BGRA8", has_alpha =  1}, new ddsktx__format_info { name = "RGB10A2", has_alpha =  1}, new ddsktx__format_info { name = "RG11B10F", has_alpha =  0}, new ddsktx__format_info { name = "RG8", has_alpha =  0}, new ddsktx__format_info { name = "RG8S", has_alpha =  0}};
		public static readonly byte[] ktx__id = { 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A };
		public enum ddsktx_format
	{
		DDSKTX_FORMAT_BC1,
DDSKTX_FORMAT_BC2,
DDSKTX_FORMAT_BC3,
DDSKTX_FORMAT_BC4,
DDSKTX_FORMAT_BC5,
DDSKTX_FORMAT_BC6H,
DDSKTX_FORMAT_BC7,
DDSKTX_FORMAT_ETC1,
DDSKTX_FORMAT_ETC2,
DDSKTX_FORMAT_ETC2A,
DDSKTX_FORMAT_ETC2A1,
DDSKTX_FORMAT_PTC12,
DDSKTX_FORMAT_PTC14,
DDSKTX_FORMAT_PTC12A,
DDSKTX_FORMAT_PTC14A,
DDSKTX_FORMAT_PTC22,
DDSKTX_FORMAT_PTC24,
DDSKTX_FORMAT_ATC,
DDSKTX_FORMAT_ATCE,
DDSKTX_FORMAT_ATCI,
DDSKTX_FORMAT_ASTC4x4,
DDSKTX_FORMAT_ASTC5x5,
DDSKTX_FORMAT_ASTC6x6,
DDSKTX_FORMAT_ASTC8x5,
DDSKTX_FORMAT_ASTC8x6,
DDSKTX_FORMAT_ASTC10x5,
_DDSKTX_FORMAT_COMPRESSED,
DDSKTX_FORMAT_A8,
DDSKTX_FORMAT_R8,
DDSKTX_FORMAT_RGBA8,
DDSKTX_FORMAT_RGBA8S,
DDSKTX_FORMAT_RG16,
DDSKTX_FORMAT_RGB8,
DDSKTX_FORMAT_R16,
DDSKTX_FORMAT_R32F,
DDSKTX_FORMAT_R16F,
DDSKTX_FORMAT_RG16F,
DDSKTX_FORMAT_RG16S,
DDSKTX_FORMAT_RGBA16F,
DDSKTX_FORMAT_RGBA16,
DDSKTX_FORMAT_BGRA8,
DDSKTX_FORMAT_RGB10A2,
DDSKTX_FORMAT_RG11B10F,
DDSKTX_FORMAT_RG8,
DDSKTX_FORMAT_RG8S,
_DDSKTX_FORMAT_COUNT
		}

		public enum ddsktx_texture_flags
	{
		DDSKTX_TEXTURE_FLAG_CUBEMAP = 0x01,
DDSKTX_TEXTURE_FLAG_SRGB = 0x02,
DDSKTX_TEXTURE_FLAG_ALPHA = 0x04,
DDSKTX_TEXTURE_FLAG_DDS = 0x08,
DDSKTX_TEXTURE_FLAG_KTX = 0x10
		}

		public enum ddsktx_cube_face
	{
		DDSKTX_CUBE_FACE_X_POSITIVE = 0,
DDSKTX_CUBE_FACE_X_NEGATIVE,
DDSKTX_CUBE_FACE_Y_POSITIVE,
DDSKTX_CUBE_FACE_Y_NEGATIVE,
DDSKTX_CUBE_FACE_Z_POSITIVE,
DDSKTX_CUBE_FACE_Z_NEGATIVE,
DDSKTX_CUBE_FACE_COUNT
		}

		public enum ddsktx__encode_type
	{
		DDSKTX__ENCODE_UNORM,
DDSKTX__ENCODE_SNORM,
DDSKTX__ENCODE_FLOAT,
DDSKTX__ENCODE_INT,
DDSKTX__ENCODE_UINT,
DDSKTX__ENCODE_COUNT
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx_sub_data
	{
		public void * buff;
		public int width;
		public int height;
		public int size_bytes;
		public int row_pitch_bytes;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx_texture_info
	{
		public int data_offset;
		public int size_bytes;
		public int format;
		public uint flags;
		public int width;
		public int height;
		public int depth;
		public int num_layers;
		public int num_mips;
		public int bpp;
		public int metadata_offset;
		public int metadata_size;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx_error
	{
		public fixed sbyte msg[256];
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__dds_pixel_format
	{
		public uint size;
		public uint flags;
		public uint fourcc;
		public uint rgb_bit_count;
		public fixed uint bit_mask[4];
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__dds_header
	{
		public uint size;
		public uint flags;
		public uint height;
		public uint width;
		public uint pitch_lin_size;
		public uint depth;
		public uint mip_count;
		public fixed uint reserved1[11];
		public ddsktx__dds_pixel_format pixel_format;
		public uint caps1;
		public uint caps2;
		public uint caps3;
		public uint caps4;
		public uint reserved2;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__dds_header_dxgi
	{
		public uint dxgi_format;
		public uint dimension;
		public uint misc_flags;
		public uint array_size;
		public uint misc_flags2;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__ktx_header
	{
		public fixed byte id[8];
		public uint endianess;
		public uint type;
		public uint type_size;
		public uint format;
		public uint internal_format;
		public uint base_internal_format;
		public uint width;
		public uint height;
		public uint depth;
		public uint array_count;
		public uint face_count;
		public uint mip_count;
		public uint metadata_size;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__dds_translate_fourcc_format
	{
		public uint dds_format;
		public int format;
		public bool srgb;
		}
		public class ddsktx__dds_translate_pixel_format
	{
		public uint bit_count = 0;
		public uint flags = 0;
		public uint[] bit_mask = new uint[4];
		public int format = 0;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__mem_reader
	{
		public byte* buff;
		public int total;
		public int offset;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__block_info
	{
		public byte bpp;
		public byte block_width;
		public byte block_height;
		public byte block_size;
		public byte min_block_x;
		public byte min_block_y;
		public byte depth_bits;
		public byte stencil_bits;
		public byte r_bits;
		public byte g_bits;
		public byte b_bits;
		public byte a_bits;
		public byte encoding;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__ktx_format_info
	{
		public uint internal_fmt;
		public uint internal_fmt_srgb;
		public uint fmt;
		public uint type;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__ktx_format_info2
	{
		public uint internal_fmt;
		public int format;
		}
		[StructLayout(LayoutKind.Sequential)]
		public struct ddsktx__format_info
	{
		public sbyte* name;
		public int has_alpha;
		}
		public static int ddsktx__read(ddsktx__mem_reader* reader, void * buff, int size)
		{
			int read_bytes = (int)((reader->offset + size) <= reader->total?size:(reader->total - reader->offset));
			CRuntime.memcpy((buff), (reader->buff + reader->offset), (ulong)(read_bytes));
			reader->offset += (int)(read_bytes);
			return (int)(read_bytes);
		}

		public static bool ddsktx__parse_ktx(ddsktx_texture_info* tc, void * file_data, int size, ddsktx_error* err)
		{
			CRuntime.memset((tc), (int)(0x0), (ulong)(sizeof(ddsktx_texture_info)));
			ddsktx__mem_reader r = new ddsktx__mem_reader();
			ddsktx__ktx_header header = new ddsktx__ktx_header();
			if (ddsktx__read(&r, &header, (int)(sizeof(ddsktx__ktx_header))) != 60) {
dds_ktx_err("ktx; header size does not match");return false;}

			if (CRuntime.memcmp((header.id), (ktx__id), (ulong)(8)) != 0) {
dds_ktx_err("ktx: invalid file header");return false;}

			if (header.endianess != 0x04030201) {
dds_ktx_err("ktx: big-endian format is not supported");return false;}

			tc->metadata_offset = (int)(r.offset);
			tc->metadata_size = ((int)(header.metadata_size));
			r.offset += ((int)(header.metadata_size));
			int format = (int)(_DDSKTX_FORMAT_COUNT);
			int count = (int)k__translate_ktx_fmt.Length;
			for (int i = (int)(0);(i) < (count);i++) {
if ((k__translate_ktx_fmt[i].internal_fmt) == (header.internal_format)) {
format = (int)(i);break;}
}
			if ((format) == (_DDSKTX_FORMAT_COUNT)) {
count = k__translate_ktx_fmt2.Length;for (int i = (int)(0);(i) < (count);i++) {
if ((k__translate_ktx_fmt2[i].internal_fmt) == (header.internal_format)) {
format = (int)(k__translate_ktx_fmt2[i].format);break;}
}}

			if ((format) == (_DDSKTX_FORMAT_COUNT)) {
dds_ktx_err("ktx: unsupported format");return false;}

			if (((header.face_count) > (1)) && (header.face_count != DDSKTX_CUBE_FACE_COUNT)) {
dds_ktx_err("ktx: incomplete cubemap");return false;}

			tc->data_offset = (int)(r.offset);
			tc->size_bytes = (int)(r.total - r.offset);
			tc->format = (int)(format);
			tc->width = ((int)(header.width));
			tc->height = ((int)(header.height));
			tc->depth = (int)(((int)(header.depth)) > (1)?((int)(header.depth)):(1));
			tc->num_layers = (int)(((int)(header.array_count)) > (1)?((int)(header.array_count)):(1));
			tc->num_mips = (int)(((int)(header.mip_count)) > (1)?((int)(header.mip_count)):(1));
			tc->bpp = (int)(k__block_info[format].bpp);
			if ((header.face_count) == (6)) tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_CUBEMAP);
			tc->flags |= (uint)((k__formats_info[format].has_alpha) != 0?DDSKTX_TEXTURE_FLAG_ALPHA:0);
			tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_KTX);
			return true;
		}

		public static bool ddsktx__parse_dds(ddsktx_texture_info* tc, void * file_data, int size, ddsktx_error* err)
		{
			ddsktx__mem_reader r = new ddsktx__mem_reader();
			ddsktx__dds_header header = new ddsktx__dds_header();
			if (((ddsktx__read(&r, &header, (int)(sizeof(ddsktx__dds_header)))) < (124)) || (header.size != 124)) {
dds_ktx_err("dds: header size does not match");return false;}

			uint required_flags = (uint)(0x00000002 | 0x00000004);
			if ((header.flags & required_flags) != required_flags) {
dds_ktx_err("dds: have invalid flags");return false;}

			if (header.pixel_format.size != sizeof(ddsktx__dds_pixel_format)) {
dds_ktx_err("dds: pixel format header is invalid");return false;}

			uint dxgi_format = (uint)(0);
			uint array_size = (uint)(1);
			if (((0x00000004) == (header.flags & 0x00000004)) && ((header.pixel_format.fourcc) == ((uint)('D') | ((uint)('X') << 8) | ((uint)('1') << 16) | ((uint)('0') << 24)))) {
ddsktx__dds_header_dxgi dxgi_header = new ddsktx__dds_header_dxgi();ddsktx__read(&r, &dxgi_header, (int)(sizeof(ddsktx__dds_header_dxgi)));dxgi_format = (uint)(dxgi_header.dxgi_format);array_size = (uint)(dxgi_header.array_size);}

			if ((header.caps1 & 0x00001000) == (0)) {
dds_ktx_err("dds: unsupported caps");return false;}

			bool cubemap = (bool)((header.caps2 & 0x00000200) != 0);
			if (cubemap && ((header.caps2 & (0 | 0x00000400 | 0x00000800 | 0x00001000 | 0x00002000 | 0x00004000 | 0x00008000)) != (0 | 0x00000400 | 0x00000800 | 0x00001000 | 0x00002000 | 0x00004000 | 0x00008000))) {
dds_ktx_err("dds: incomplete cubemap");return false;}

			int format = (int)(_DDSKTX_FORMAT_COUNT);
			bool has_alpha = (bool)((header.pixel_format.flags & 0x00000002) != 0);
			bool srgb = false;
			if ((dxgi_format) == (0)) {
if ((header.pixel_format.flags & 0x00000004) == (0x00000004)) {
int count = k__translate_dds_fourcc.Length;for (int i = (int)(0);(i) < (count);i++) {
if ((k__translate_dds_fourcc[i].dds_format) == (header.pixel_format.fourcc)) {
format = (int)(k__translate_dds_fourcc[i].format);break;}
}}
 else {
int count = k__translate_dds_pixel.Length;for (int i = (int)(0);(i) < (count);i++) {
ddsktx__dds_translate_pixel_format f = k__translate_dds_pixel[i];if (((((((f.bit_count) == (header.pixel_format.rgb_bit_count)) && ((f.flags) == (header.pixel_format.flags))) && ((f.bit_mask[0]) == (header.pixel_format.bit_mask[0]))) && ((f.bit_mask[1]) == (header.pixel_format.bit_mask[1]))) && ((f.bit_mask[2]) == (header.pixel_format.bit_mask[2]))) && ((f.bit_mask[3]) == (header.pixel_format.bit_mask[3]))) {
format = (int)(f.format);break;}
}}
}
 else {
int count = k__translate_dxgi.Length;for (int i = (int)(0);(i) < (count);i++) {
if ((k__translate_dxgi[i].dds_format) == (dxgi_format)) {
format = (int)(k__translate_dxgi[i].format);srgb = (bool)(k__translate_dxgi[i].srgb);break;}
}}

			if ((format) == (_DDSKTX_FORMAT_COUNT)) {
dds_ktx_err("dds: unknown format");return false;}

			CRuntime.memset((tc), (int)(0x0), (ulong)(sizeof(ddsktx_texture_info)));
			tc->data_offset = (int)(r.offset);
			tc->size_bytes = (int)(r.total - r.offset);
			tc->format = (int)(format);
			tc->width = ((int)(header.width));
			tc->height = ((int)(header.height));
			tc->depth = (int)((1) > ((int)(header.depth))?(1):((int)(header.depth)));
			tc->num_layers = (int)((1) > ((int)(array_size))?(1):((int)(array_size)));
			tc->num_mips = (int)((header.caps1 & 0x00400000)?(int)(header.mip_count):1);
			tc->bpp = (int)(k__block_info[format].bpp);
			if (((has_alpha) != 0) || ((k__formats_info[format].has_alpha) != 0)) tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_ALPHA);
			if cubemap tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_CUBEMAP);
			if ((srgb) != 0) tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_SRGB);
			tc->flags |= (uint)(DDSKTX_TEXTURE_FLAG_DDS);
			return true;
		}

		public static void ddsktx_get_sub(ddsktx_texture_info* tc, ddsktx_sub_data* sub_data, void * file_data, int size, int array_idx, int slice_face_idx, int mip_idx)
		{
			ddsktx__mem_reader r = (ddsktx__mem_reader)({ (byte*)(file_data), size, tc->data_offset });
			int format = (int)(tc->format);
			ddsktx__block_info* binfo = &k__block_info[format];
			int bpp = (int)(binfo->bpp);
			int block_size = (int)(binfo->block_size);
			int min_block_x = (int)(binfo->min_block_x);
			int min_block_y = (int)(binfo->min_block_y);
			int num_faces = 0;
			int slice_idx = 0;int face_idx = 0;int num_slices = 0;
			if ((tc->flags & DDSKTX_TEXTURE_FLAG_CUBEMAP) != 0) {
slice_idx = (int)(0);face_idx = (int)(slice_face_idx);num_faces = (int)(DDSKTX_CUBE_FACE_COUNT);num_slices = (int)(1);}
 else {
slice_idx = (int)(slice_face_idx);face_idx = (int)(0);num_faces = (int)(1);num_slices = (int)(tc->depth);}

			if ((tc->flags & DDSKTX_TEXTURE_FLAG_DDS) != 0) {
int num_layers = (int)(tc->num_layers);for (int layer = (int)(0);(layer) < (num_layers);layer++) {
for (int face = (int)(0);(face) < (num_faces);face++) {
int width = (int)(tc->width);int height = (int)(tc->height);int mip_count = (int)(tc->num_mips);for (int mip = (int)(0);(mip) < (mip_count);mip++) {
int row_bytes = 0;int mip_size = 0;if ((format) < (_DDSKTX_FORMAT_COMPRESSED)) {
int num_blocks_wide = (int)((width) > (0)?((1) > ((width + 3) / 4)?(1):((width + 3) / 4)):0);num_blocks_wide = (int)((min_block_x) > (num_blocks_wide)?(min_block_x):(num_blocks_wide));int num_blocks_high = (int)((height) > (0)?((1) > ((height + 3) / 4)?(1):((height + 3) / 4)):0);num_blocks_high = (int)((min_block_y) > (num_blocks_high)?(min_block_y):(num_blocks_high));row_bytes = (int)(num_blocks_wide * block_size);mip_size = (int)(row_bytes * num_blocks_high);}
 else {
row_bytes = (int)((width * bpp + 7) / 8);mip_size = (int)(row_bytes * height);}
for (int slice = (int)(0);(slice) < (num_slices);slice++) {
if (((((layer) == (array_idx)) && ((mip) == (mip_idx))) && ((slice) == (slice_idx))) && ((face_idx) == (face))) {
sub_data->buff = r.buff + r.offset;sub_data->width = (int)(width);sub_data->height = (int)(height);sub_data->size_bytes = (int)(mip_size);sub_data->row_pitch_bytes = (int)(row_bytes);return;}
r.offset += (int)(mip_size);}width >>= 1;height >>= 1;if ((width) == (0)) {
width = (int)(1);}
if ((height) == (0)) {
height = (int)(1);}
}}}}
 else if ((tc->flags & DDSKTX_TEXTURE_FLAG_KTX) != 0) {
int width = (int)(tc->width);int height = (int)(tc->height);int c = (int)(tc->num_mips);for (int mip = (int)(0);(mip) < (c);mip++) {
int row_bytes = 0;int mip_size = 0;if ((format) < (_DDSKTX_FORMAT_COMPRESSED)) {
int num_blocks_wide = (int)((width) > (0)?((1) > ((width + 3) / 4)?(1):((width + 3) / 4)):0);num_blocks_wide = (int)((min_block_x) > (num_blocks_wide)?(min_block_x):(num_blocks_wide));int num_blocks_high = (int)((height) > (0)?((1) > ((height + 3) / 4)?(1):((height + 3) / 4)):0);num_blocks_high = (int)((min_block_y) > (num_blocks_high)?(min_block_y):(num_blocks_high));row_bytes = (int)(num_blocks_wide * block_size);mip_size = (int)(row_bytes * num_blocks_high);}
 else {
row_bytes = (int)((width * bpp + 7) / 8);mip_size = (int)(row_bytes * height);}
int image_size = 0;ddsktx__read(&r, &image_size, (int)(sizeof((image_size))));int num_layers = (int)(tc->num_layers);for (int layer = (int)(0);(layer) < (num_layers);layer++) {
for (int face = (int)(0);(face) < (num_faces);face++) {
for (int slice = (int)(0);(slice) < (num_slices);slice++) {
if (((((layer) == (array_idx)) && ((mip) == (mip_idx))) && ((slice) == (slice_idx))) && ((face_idx) == (face))) {
sub_data->buff = r.buff + r.offset;sub_data->width = (int)(width);sub_data->height = (int)(height);sub_data->size_bytes = (int)(mip_size);sub_data->row_pitch_bytes = (int)(row_bytes);return;}
r.offset += (int)(mip_size);}r.offset = (int)(((r.offset) + (3)) & ((~0) & (~(3))));}}width >>= 1;height >>= 1;if ((width) == (0)) {
width = (int)(1);}
if ((height) == (0)) {
height = (int)(1);}
r.offset = (int)(((r.offset) + (3)) & ((~0) & (~(3))));}}
 else {
}

		}

		public static bool ddsktx_parse(ddsktx_texture_info* tc, void * file_data, int size, ddsktx_error* err)
		{
			ddsktx__mem_reader r = (ddsktx__mem_reader)({ (byte*)(file_data), size, 0 });
			uint file_flag = (uint)(0);
			if (ddsktx__read(&r, &file_flag, (int)(sizeof((file_flag)))) != sizeof((file_flag))) {
dds_ktx_err("invalid texture file");return false;}

			switch (file_flag){
case ((uint)('D') | ((uint)('D') << 8) | ((uint)('S') << 16) | ((uint)(' ') << 24)):return (bool)(ddsktx__parse_dds(tc, file_data, (int)(size), err));case ((uint)(0xAB) | ((uint)('K') << 8) | ((uint)('T') << 16) | ((uint)('X') << 24)):return (bool)(ddsktx__parse_ktx(tc, file_data, (int)(size), err));default: dds_ktx_err("unknown texture format");return false;}

		}

		public static sbyte* ddsktx_format_str(int format)
		{
			return k__formats_info[format].name;
		}

		public static bool ddsktx_format_compressed(int format)
		{
			return (bool)((format) < (_DDSKTX_FORMAT_COMPRESSED));
		}

}
}